<jittershader name="dilatation">
	<description>Shader filter the video noise of dilatation</description>
	<param name="ModelViewProj" type="float4x4" state="MODELVIEW_PROJECTION_MATRIX" transform="IDENTITY"/> 
	<param name="size" type="float2" default="640.0 480.0" />
	<param name="bypass" type="float" default="0.0" />
	<param name="image" type="int" state="TEXUNIT0" default ="0" />

	<language name="cg" version="1.0">
		<bind param="ModelViewProj" program="vp" />
		<bind param="size" program="fp" />
		<bind param="image" program="fp" />
		<bind param="bypass" program="fp" />
		<program name="vp" type="vertex"  entry="main" source="tllslo-vp.cg">
		</program>
		<program name="fp" type="fragment" entry="main">
<![CDATA[
//
// Fragment shader 
// Author: wai kit chan
//cg
static const float2 dir[17] ={ {0,0},{0,1}, {0,-1}, {-1,0}, {1,0}, {1,1}, {1,-1}, {-1,-1}, {-1,1},
	{0,2}, {0,-2}, {-2,0}, {2,0}, {2,2}, {2,-2}, {-2,2}, {-2,-2} };

void main(

	in float4 decalCoords      : TEXCOORD0,//ssmap coor
	//uniform samplerRECT  MaVideo   : TEXUNIT0,     // echo FB capture
	uniform float bypass,
	uniform samplerRECT image,
	uniform float2 size,
	
	out float4 color		: COLOR
    )
{
	//at first decalCoords is between 0 and 1, after the multiplication it's between 0 and video size
	float2 CoordsTmp=decalCoords.xy* size;
	
	if (bypass == 1.0)
	{
		//return the pixel value without processing
		color = texRECT(image,CoordsTmp).rgba ;//* 0.5  + 0.5 * float4(0.0, 0.5, 1.0 , 1.0);
	}else{
		float grayMedian;
		float4 colorMedian; 

		float data[17] ;
		for( int i=0; i<17; ++i) 
		{
			colorMedian = texRECT( image, CoordsTmp.xy + dir[i]);
			grayMedian = colorMedian.r*0.3+colorMedian.g*0.59+colorMedian.b*0.11;
			data[i] = grayMedian;
		} 
		float dilatation ; 
		dilatation = min (data[0],data[1]);
		dilatation = min (dilatation,data[2]);
		dilatation = min (dilatation,data[3]);
		dilatation = min (dilatation,data[4]);

		dilatation = min (dilatation,data[5]);
		dilatation = min (dilatation,data[6]);
		dilatation = min (dilatation,data[7]);
		dilatation = min (dilatation,data[8]);

		dilatation = min (dilatation,data[9]);
		dilatation = min (dilatation,data[10]);
		dilatation = min (dilatation,data[11]);
		dilatation = min (dilatation,data[12]);

		dilatation = min (dilatation,data[13]);
		dilatation = min (dilatation,data[14]);
		dilatation = min (dilatation,data[15]);
		dilatation = min (dilatation,data[16]);

		color  = float4 (dilatation,dilatation,dilatation,1.0) ; 
	}
}
]]>		
		</program>		
	</language>
</jittershader>
