<jittershader name="multiply">
	<description>
	Multiply composite operator
	</description>
	<param name="amount" type="vec4" default="1. 1. 1. 1.">
		<description>Blend amount</description>
	</param>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="tex2" type="int" default="2" />
	<param name="tex3" type="int" default="3" />
	<param name="tex4" type="int" default="4" />
	<param name="tex5" type="int" default="5" />
	<param name="tex6" type="int" default="6" />
	<param name="tex7" type="int" default="7" />
	<language name="glsl" version="1.0">
		<bind param="amount" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />	
		<bind param="tex2" program="fp" />
		<bind param="tex3" program="fp" />	
		<bind param="tex4" program="fp" />
		<bind param="tex5" program="fp" />	
		<bind param="tex6" program="fp" />
		<bind param="tex7" program="fp" />	
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

// texcoords
varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texcoord2;
varying vec2 texcoord3;
varying vec2 texcoord4;
varying vec2 texcoord5;
varying vec2 texcoord6;
varying vec2 texcoord7;

// samplers
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;
uniform sampler2DRect tex2;
uniform sampler2DRect tex3;
uniform sampler2DRect tex4;
uniform sampler2DRect tex5;
uniform sampler2DRect tex6;
uniform sampler2DRect tex7;

// blend amount
uniform vec4 amount;

// entry point
void main()
{
	vec4 a = texture2DRect(tex0, texcoord0);
	vec4 b = texture2DRect(tex1, texcoord1);
	vec4 c = texture2DRect(tex2, texcoord2);
	vec4 d = texture2DRect(tex3, texcoord3);
	vec4 e = texture2DRect(tex4, texcoord4);
	vec4 f = texture2DRect(tex5, texcoord5);
	vec4 g = texture2DRect(tex6, texcoord6);
	vec4 h = texture2DRect(tex7, texcoord7);

	vec4 result = (a * b * c * d * e * f * g * h);
	vec4 ff = amount;
	gl_FragColor = result;
}

]]>
		</program>
	</language>
</jittershader>
