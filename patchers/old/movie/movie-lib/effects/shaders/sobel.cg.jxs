<jittershader name="sobel">
	<description>Shader Sobel filter for edge detecting</description>
	<param name="ModelViewProj" type="float4x4" state="MODELVIEW_PROJECTION_MATRIX" transform="IDENTITY"/> 
	<param name="size" type="float2" default="640.0 480.0" />
	<param name="bypass" type="float" default="0.0" />
	<param name="image" type="int" state="TEXUNIT0" default ="0" />

	<language name="cg" version="1.0">
		<bind param="ModelViewProj" program="vp" />
		<bind param="size" program="fp" />
		<bind param="image" program="fp" />
		<bind param="bypass" program="fp" />
		<program name="vp" type="vertex"  entry="main" source="tllslo-vp.cg">
		</program>
		<program name="fp" type="fragment" entry="main">
<![CDATA[
//
// Fragment shader 
// Author: wai kit chan
//cg
static const int dim = 3;// = 5 : 8FPS ; = 3 : 21FPS ; >=6 bug
static const int d1 = dim*dim;
static const int d2 = dim*dim-1;
static const float d3 = (dim*dim)/2;//9
static float data[dim*dim]; 
static const float2 dir[9] = { {0,0},{1,1}, {1,-1}, {-1,-1}, {-1,1} ,{2,2}, {2,-2}, {-2,-2}, {-2,2}};

void main(

	in float4 decalCoords      : TEXCOORD0,//ssmap coor
	uniform float bypass,
	uniform samplerRECT image,
	uniform float2 size,
	
	out float4 color		: COLOR
    )
{
	//at first decalCoords is between 0 and 1, after the multiplication it's between 0 and video size
	float2 CoordsTmp=decalCoords.xy* size;
	
	if (bypass == 1.0)
	{
		//return the pixel value without processing
		color = texRECT(image,CoordsTmp).rgba ;
	}else{
		//sobel operation
		float4 sobelV = 
		-     texRECT(image,float2( CoordsTmp.x - 1 , CoordsTmp.y - 1 ))
		- 2 * texRECT(image,float2( CoordsTmp.x     , CoordsTmp.y - 1 ))
		-     texRECT(image,float2( CoordsTmp.x + 1 , CoordsTmp.y - 1 ))
		+     texRECT(image,float2( CoordsTmp.x - 1 , CoordsTmp.y + 1 ))
		+ 2 * texRECT(image,float2( CoordsTmp.x     , CoordsTmp.y + 1 ))
		+     texRECT(image,float2( CoordsTmp.x + 1 , CoordsTmp.y + 1 ));
		float4 sobelH =  
		-     texRECT(image,float2( CoordsTmp.x - 1 , CoordsTmp.y - 1 ))
		- 2 * texRECT(image,float2( CoordsTmp.x - 1 , CoordsTmp.y     ))
		-     texRECT(image,float2( CoordsTmp.x - 1 , CoordsTmp.y + 1 ))
		+     texRECT(image,float2( CoordsTmp.x + 1 , CoordsTmp.y - 1 ))
		+ 2 * texRECT(image,float2( CoordsTmp.x + 1 , CoordsTmp.y     ))
		+     texRECT(image,float2( CoordsTmp.x + 1 , CoordsTmp.y + 1 ));

		float4 sobel;
		sobel   = sqrt(sobelV*sobelV + sobelH * sobelH);
		float graysobel = saturate(0.33 * sobel.r + 0.33 * sobel.g + 0.33 * sobel.b);
		graysobel= saturate (graysobel*2.0);
		//return sobel value
		color = float4(graysobel,graysobel,graysobel,1.0);		
	}
}
]]>		
		</program>		
	</language>
</jittershader>
