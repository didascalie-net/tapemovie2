<jittershader name="median">
	<description>Shader filter the video noise of median method</description>
	<param name="ModelViewProj" type="float4x4" state="MODELVIEW_PROJECTION_MATRIX" transform="IDENTITY"/> 
	<param name="size" 			type="float2" default="640.0 480.0" />
	<param name="bypass" 		type="float"  default="0.0" />
	<param name="blur3_5" 		type="float"  default="0.0" />
	<param name="coef" 			type="float"  default="9.0" />
	<param name="image" 		type="int" 	state="TEXUNIT0" default ="0" />
	<param name="outColor" 		type="vec4"   default="0 1 0 1" />
	
	<language name="cg" version="1.0">
		<bind param="ModelViewProj" program="vp" />
		<bind param="size" 			program="fp" />
		<bind param="image" 		program="fp" />
		<bind param="bypass" 		program="fp" />
		<bind param="blur3_5" 		program="fp" />
		<bind param="coef" 			program="fp" />
		<bind param="outColor" 		program="fp" />
		<program name="vp" type="vertex"  entry="main" source="tllslo-vp.cg">
		</program>
		<program name="fp" type="fragment" entry="main">
<![CDATA[
//
// Fragment shader 
// Author: wai kit chan
//cg
static const float2 dir3[9] = { {0,0},{1,1}, {1,-1}, {-1,-1}, {-1,1} ,{2,2}, {2,-2}, {-2,-2}, {-2,2}};
static const float2 dir5[25] = { 
{-2,-2},{-2,-1}, {-2,0}, {-2,1}, {-2,2} ,
{-1,-2},{-1,-1}, {-1,0}, {-1,1}, {-1,2} ,
{0,-2},{0,-1}, {0,0}, {0,1}, {0,2} ,
{1,-2},{1,-1}, {1,0}, {1,1}, {1,2} ,
{2,-2},{2,-1}, {2,0}, {2,1}, {2,2}
};

void main(

	in float4 decalCoords      : TEXCOORD0,
	uniform float bypass,
	uniform float blur3_5,
	uniform float coef,
	uniform samplerRECT image,
	uniform float2 size,
	uniform float4 outColor, 
	
	out float4 color		: COLOR
    )
{
	//at first decalCoords is between 0 and 1, after the multiplication it's between 0 and video size
	//decalCoords.y =1. - decalCoords.y ; 
	float2 CoordsTmp=decalCoords.xy* size;
	float4 img = texRECT(image,CoordsTmp).rgba ;
	if (bypass == 1.0)
	{
		//return the pixel value without processing
		//color = img * 0.5 + 0.5 * float4(0.8,0.0,0.0,1.) ;
		if (img.rgb == outColor.rgb)
		{
			color = float4 (0,0,0,0);
		}else{
			color = img;
		}
		
	}else{	
		if (img.rgb == outColor.rgb)
		{
			float3 tmpcolor; 
			float3 blurcolor;
			if (blur3_5 ==0.0 )
			{
				for (int i = 0 ; i <9 ; i++)
				{
					tmpcolor = texRECT(image,CoordsTmp+dir3[i]).rgb;
					if (outColor.rgb!=tmpcolor.rgb)
					{
						blurcolor.rgb += tmpcolor;
					}
				}
				blurcolor /= (coef+4.5);
				color = float4(blurcolor,img.a); 
			}else{
				for (int i = 0 ; i <25 ; i++)
				{
					tmpcolor = texRECT(image,CoordsTmp+dir5[i]).rgb;
					if (outColor.rgb!=tmpcolor.rgb)
					{
						blurcolor.rgb += tmpcolor; 
	
					}
				}
				//blurcolor /= coef;
				blurcolor /= (coef+12.5);
				color = float4(blurcolor,img.a); 
			}
		}else{ 
			color = img ; 
		}
	}
}
]]>		
		</program>		
	</language>
</jittershader>
